mod FMA-ATL-SYNTAX is
  extending FMA-OCL-SEMANTICS .
  
  op queryDomain : VarExpr IObjectSet Map{QualifiedCid,Oid} Map{Oid,Location} -> K .


  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- MODULE: TRANSFORMATION  	
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------
  
  sort AtlTrafoStmt .
  op module_;___ : String TrafoHeaderAtlStmt RuleDeclListAtlStmt EnvP -> AtlTrafoStmt [ctor] .
   
  sort TrafoHeaderAtlStmt .
  --- list of parameters cannot be the empty list though
  --- the second ParamList needs to be wrapped by parentheses
  ---  to be fixed with preferences
  op create_from_ : ParamList ParamList -> TrafoHeaderAtlStmt [ctor] .  
  op create_refining_ : ParamList ParamList -> TrafoHeaderAtlStmt [ctor] .  
  
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- RULES  	
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------
  sort RuleDeclAtlStmt .
  op rule_{from_:_in_`(_`)_to_} : ProcName VarExpr QualifiedCid VarExpr Expr UsingAtlRuleExpr? OutVarDeclListAtlRuleExpr -> RuleDeclAtlStmt [ctor] .
  --- no matching condition
  op rule_{from_:_in__to_} : ProcName VarExpr QualifiedCid VarExpr UsingAtlRuleExpr? OutVarDeclListAtlRuleExpr -> RuleDeclAtlStmt [ctor] .
  eq rule RN:ProcName {from V:VarExpr : C:QualifiedCid in MN:VarExpr U:UsingAtlRuleExpr? to OVL:OutVarDeclListAtlRuleExpr } =
  	rule RN:ProcName {from V:VarExpr : C:QualifiedCid in MN:VarExpr ( (DSL#Bool) true ) U:UsingAtlRuleExpr? to OVL:OutVarDeclListAtlRuleExpr } . 
  	
  sort LazyRuleDeclAtlStmt .
  subsort LazyRuleDeclAtlStmt < RuleDeclAtlStmt . 
  op lazy_ : RuleDeclAtlStmt -> LazyRuleDeclAtlStmt [ctor] . 
  op unique`lazy_ : RuleDeclAtlStmt -> LazyRuleDeclAtlStmt [ctor] . 
 
  sort UsingAtlRuleExpr? UsingAtlRuleExpr .
  subsort UsingAtlRuleExpr < UsingAtlRuleExpr? . 
  op noUsing : -> UsingAtlRuleExpr? [ctor] . 
  op using{_} : UsingVarDeclListExpr -> UsingAtlRuleExpr [ctor] .

  sort UsingVarDeclListExpr UsingVarDeclExpr .
  subsort UsingVarDeclExpr < UsingVarDeclListExpr .
  op __ : UsingVarDeclListExpr UsingVarDeclListExpr -> UsingVarDeclListExpr [ctor assoc] .   
  op _:_=_; : VarExpr FmaType Expr -> UsingVarDeclExpr [ctor] .   
  
  --- noUsing
  op rule_{from_:_in_to_} : ProcName VarExpr QualifiedCid VarExpr OutVarDeclListAtlRuleExpr -> RuleDeclAtlStmt [ctor] .
  eq rule PR:ProcName { from V:VarExpr : C:QualifiedCid in MN:VarExpr to OV:OutVarDeclListAtlRuleExpr } =
  	rule PR:ProcName { from V:VarExpr : C:QualifiedCid in MN:VarExpr noUsing to OV:OutVarDeclListAtlRuleExpr } . 
  op rule_{from_:_in_`(_`)to_} : ProcName VarExpr QualifiedCid VarExpr OclExpInv OutVarDeclListAtlRuleExpr -> RuleDeclAtlStmt [ctor] .
  eq rule PR:ProcName { from V:VarExpr : C:QualifiedCid in MN:VarExpr ( ME:Expr ) to OV:OutVarDeclListAtlRuleExpr } =
  	rule PR:ProcName { from V:VarExpr : C:QualifiedCid in MN:VarExpr ( ME:Expr ) noUsing to OV:OutVarDeclListAtlRuleExpr } . 
  
  sort OutVarDeclAtlRuleExpr OutVarDeclListAtlRuleExpr .
  subsort OutVarDeclAtlRuleExpr < OutVarDeclListAtlRuleExpr .
  op _,_ : OutVarDeclListAtlRuleExpr OutVarDeclListAtlRuleExpr -> OutVarDeclListAtlRuleExpr [ctor assoc] .   
  op _:_in_`(_`) : VarExpr QualifiedCid VarExpr BindingListAtlRuleExpr -> OutVarDeclAtlRuleExpr [ctor] . 
  op _:_in_`(`) : VarExpr QualifiedCid VarExpr -> OutVarDeclAtlRuleExpr [ctor] . 
  eq V:VarExpr : C:QualifiedCid in MN:VarExpr ( ) = V:VarExpr : C:QualifiedCid in MN:VarExpr ( noBinding ) . 
  
  sort BindingAtlRuleExpr BindingListAtlRuleExpr . 
  subsort BindingAtlRuleExpr < BindingListAtlRuleExpr .
  op _,_ : BindingListAtlRuleExpr BindingListAtlRuleExpr -> BindingListAtlRuleExpr [ctor assoc id: noBinding] .
  op noBinding : -> BindingListAtlRuleExpr [ctor] . 
  --- Any FMA expression can be used in an attribute binding
  op _<-_ : PropName Expr -> BindingAtlRuleExpr [ctor] .
  
  sort RuleDeclListAtlStmt .
  subsort RuleDeclAtlStmt < RuleDeclListAtlStmt .
  op __ : RuleDeclListAtlStmt RuleDeclListAtlStmt -> RuleDeclListAtlStmt [ctor assoc id: noAtlRuleDecl] .
  op noAtlRuleDecl : -> RuleDeclListAtlStmt [ctor] .
  
   
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- ATL DECLARATIVE EXPRESSIONS
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------
  --- ATL expressions are FMA expressions (for syntax only)
  --- once they are translated into FMA statements
  --- 	lazy invocations become FMA model actions (level 2)    
  sort AtlBindingExpr LazyRuleInvExpr ResolveTempInvExpr .
  subsort ResolveTempInvExpr LazyRuleInvExpr < AtlBindingExpr < Expr   .
  op resolveTemp`(_,_`) : Expr ValueExpr -> ResolveTempInvExpr .   

  
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- PROCEDURE DECLARATIONS: AtlHelper, AtlAttibute
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- body can be a FmaExpr
  --- 	value
  ---	var
  ---	ocl expr invocation enclosed in oclEval(OCLE:OclExp)
  ---	proc inv: AtlHelper or AtlAttribute
  
  sort AtlHelperDecl AtlAttributeDecl AtlProcDecl .
  subsorts AtlHelperDecl AtlAttributeDecl < AtlProcDecl < ProcDecl .
    
  --- CASE A: FUNCTIONAL HELPERS
  op helper`context_def`:_`(_`):_=_; : QualifiedCid ProcName ParamList Scalar Expr -> AtlHelperDecl .
  --- no parameters: syntactic sugar
  op helper`context_def`:_`(`):_=_; : QualifiedCid ProcName Scalar Expr -> AtlHelperDecl .
  eq helper context CONTEXT-TYPE:QualifiedCid def : PN:ProcName ( ) : RETURN-TYPE:Scalar = BODY:Expr ;  =
   	helper context CONTEXT-TYPE:QualifiedCid def : PN:ProcName ( nil ) : RETURN-TYPE:Scalar = BODY:Expr ; .
  
  --- TODO: ATTRIBUTE
  --- CASE B: attribute with contextual instance, no params
  --- op helper`context_def:_:_=_ : OclType VarExpr Scalar Expr -> AtlAttributeDecl .

  --- TODO
  --- CASE C: ATTRIBUTE
  --- no contextual type, with params
  --- op helper`def`:_`(_`):_=_ : ProcName ParamList Scalar Expr -> AtlAttributeDecl .
  --- eq helper def : PN:ProcName : RETURN-TYPE:Scalar ( nil ) = BODY:Expr  =
  ---  helper def : PN:ProcName : RETURN-TYPE:Scalar = BODY:Expr  .
  
  --- CASE D: ATTRIBUTE
  --- no context, no parameters
  op helper`def`:_:_=_; : ProcName Scalar Expr -> AtlAttributeDecl .

  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- PROCEDURE INVOCATIONS: AtlHelper, AtlAttibute  	
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- 	
  --- CASE A (helper): contextual type
  --- invoke interpreter setting contextual variable self to expression
  op _._`(_`) : Expr ProcName ArgList -> ProcCallExpr [ctor] .  	
  --- op _._`(`) : Expr ProcName -> ProcCallExpr .
  --- eq EX:Expr . PN:ProcName ( ) =  (EX:Expr . PN:ProcName ( nil )) .   	
  --- syntax for super
  op super : -> VarExpr . --- cannot be used in OclExp
  --- CASE B (attribute): contextual instance, params
  --- op _`._`(_`) : EX:Expr ProcName ArgList -> ProcCallExpr [ctor] .
  --- CASE C (attribute): no contextual type, params
  --- op thisModule`._`(_`) : ProcName ArgList -> ProcCallExpr [ctor] .
  --- CASE D (attribute): no contextual type, no params
  op thisModule`._ : ProcName -> ProcCallExpr [ctor] .
  
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- LAZY RULES	
  --- --------------------------------------------------------------------------	
  --- --------------------------------------------------------------------------	
  --- invocation of a lazy rule over an instance
  op thisModule`._`(_`) : ProcName VarExpr -> LazyRuleInvExpr .    
  --- invocation of a lazy rule over a collection
  --- OCLE:Expr -> collect( VAR:VarExpr | thisModule . RN:ProcName( VAR:VarExpr ))
  op _->`collect`(_|`thisModule`._`(_`)`)  : Expr VarExpr ProcName VarExpr -> LazyRuleInvExpr .    

  --- FMA syntax (used for the semantics of ATL)
  --- we need these contructs here to be able to intialize RHS graph
  sorts LazyRuleInvAtlStmt AtlStmt . 
  subsort LazyRuleInvAtlStmt < AtlStmt < SingletonActStmt .

  --- allows us to set a containment 
  --- the containment knows the context
  op setCmtLazyRule : PropName ProcName Expr -> LazyRuleInvAtlStmt .
  
 

  --- --------------------------------------------------------------------------  
  --- --------------------------------------------------------------------------  
  --- ATL TRACE INTERPRETER
  --- --------------------------------------------------------------------------  
  --- --------------------------------------------------------------------------

  --- TRACE INTERPRETER SYNTAX
  sort SingletonTraceStmt TraceStmtValue TraceStmt .
  
  op tUnit : -> TraceStmtValue . 
  --- source vble, link target(rule name, target vble name, target vble) 
  op insertTraceLink : VarExpr ValueExpr ValueExpr VarExpr -> SingletonTraceStmt .

  subsorts SingletonTraceStmt TraceStmtValue < TraceStmt .
  op _;_ : TraceStmt TraceStmt -> TraceStmt [prec 50 assoc] .

endm


